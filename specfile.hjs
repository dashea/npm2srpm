{{! vim:filetype=spec.handlebars
}}
{{#if scope}}
%global modulescope {{{scope}}}
%global modulename {{{scope}}}/{{{name}}}
{{else}}
%global modulename {{{name}}}
{{/if}}

{{#if binary}}
%global npmlib_dir %{npmlib_sitearch}
%global nodejs_dir %{nodejs_sitearch}
{{else}}
%global npmlib_dir %{npmlib_sitelib}
%global nodejs_dir %{nodejs_sitelib}
{{/if}}

%define __requires_exclude_from ^%{npmlib_dir}/%{modulename}/%{version}/tests?/.*

Name:           {{{packageName}}}
Version:        {{{version}}}
Release:        {{{release}}}%{?dist}
Summary:        {{{summary}}}

License:        {{{license}}}
{{#if url}}
URL:            {{{url}}}
{{/if}}
Source0:        {{{sourceUrl}}}

{{#each patches}}
Patch{{{patchNum}}}: {{{patchName}}}
{{/each}}

BuildRequires:  npmlib-packaging

{{#if binary}}
BuildRequires:  nodejs-devel
ExclusiveArch:  %{nodejs_arches}
{{else}}
BuildArch:      noarch
ExclusiveArch:  %{nodejs_arches} noarch
{{/if}}

{{#each buildRequires}}
BuildRequires:  {{{buildRequiresExp}}}
{{/each}}
{{#if compressedManPages}}
BuildRequires:  /bin/gunzip
{{/if}}

Requires:       npmlib(%{modulename}) = %{version}

%description
{{{description}}}

%package {{{version}}}
Summary:        {{{summary}}}

{{#each extraRequires}}
Requires:       {{{requirement}}}
{{/each}}

%description {{{version}}}
{{{description}}}

%prep
%autosetup -p0 -n package

%build
{{#if binary}}
%{npmlib_symlink_deps} .

%{set_build_flags}

# tell node-gyp to use the installed nodejs headers instead of downloading them
npm_config_nodedir=/usr
export npm_config_nodedir

{{{installScript}}}
{{else}}
# Nothing to build
{{/if}}

%install
mkdir -p %{buildroot}%{npmlib_dir}/%{modulename}/%{version}
{{#each fileList}}
cp -pr {{{fileName}}} %{buildroot}%{npmlib_dir}/%{modulename}/%{version}
{{/each}}
{{#if binary}}
mkdir -p %{buildroot}%{npmlib_dir}/%{modulename}/%{version}/build/Release
cp -p build/Release/*.node %{buildroot}%{npmlib_dir}/%{modulename}/%{version}/build/Release/
( cd %{buildroot}%{npmlib_dir}/%{modulename}/%{version}/build/ &&
  for f in Release/*.node ; do ln -s "${f}" . ; done
)
{{/if}}

{{#if binList}}
mkdir -p %{buildroot}%{_bindir}
{{/if}}
{{#each binList}}
ln -s %{npmlib_dir}/%{modulename}/%{version}/{{{modulePath}}} %{buildroot}/%{_bindir}/{{{binPath}}}
{{/each}}

{{#each manList}}
mkdir -p %{buildroot}%{_mandir}/man{{{manSection}}}
{{#each manPages}}
{{! symlinking man pages doesn't work well, since rpm will auto-compress it but only rename the symlink }}
cp %{buildroot}%{npmlib_dir}/%{modulename}/%{version}/{{{modulePath}}} %{buildroot}/%{_mandir}/man{{{../manSection}}}/{{{manPath}}}
{{#if compressed}}
gunzip %{buildroot}/%{_mandir}/man{{{../manSection}}}/{{{manPath}}}
{{/if}}
{{/each}}
{{/each}}

mkdir -p %{buildroot}%{nodejs_dir}
{{#if scope}}
mkdir %{buildroot}%{nodejs_dir}/%{modulescope}
{{/if}}
ln -s %{npmlib_dir}/%{modulename}/%{version} %{buildroot}/%{nodejs_dir}/%{modulename}

%{npmlib_symlink_deps}

{{#if check}}
%check
rm -rf node_modules && %{npmlib_symlink_deps} .
%{__nodejs} -e 'require("./")'
{{/if}}

%files
{{#each docList}}
%doc {{{docName}}}
{{/each}}
{{#each licenseList}}
%license {{{licenseName}}}
{{/each}}
{{#each binList}}
%{_bindir}/{{{binPath}}}
{{/each}}
{{#each manList}}
{{#each manPages}}
%{_mandir}/man{{{../manSection}}}/{{{manPath}}}*
{{/each}}
{{/each}}
%{nodejs_dir}/%{modulename}
{{#if scope}}
%dir %{nodejs_dir}/%{modulescope}
{{/if}}

%files {{{version}}}
{{#each docList}}
%doc {{{docName}}}
{{/each}}
{{#each licenseList}}
%license {{{licenseName}}}
{{/each}}
%{npmlib_dir}/%{modulename}/%{version}
%dir %{npmlib_dir}/%{modulename}/
{{#if scope}}
%dir %{npmlib_dir}/%{modulescope}
{{/if}}

%changelog
* {{{cldate}}} npm2srpm <dshea@redhat.com> - {{{version}}}-{{{release}}}
- Package automatically generated by npm2srpm
